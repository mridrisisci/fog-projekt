@startuml
'https://plantuml.com/class-diagram


class Main {
+main(String[] args)
}

package utilities {
    class SVG {
    - StringBuilder svg
    + SVG()
    + addRectangle()
    + addLine()
    + addArrow()
    + addText()
    + addSvg()
    'Override
    + toString()
    }
    class SendGrid
    {
    - String API_KEY
    - String salespersonEmail
    - String customerEmail
    - String adminEmail
    - String subjectLine
    - String body
    + SendGrid(String to, String name, String from)
    }
}

package controllers {
    class OrderController {
    + addRoutes()
    - boolean validateOrderIsPaid()
    - void requestPaymentByID()
    - void confirmPaymentByID()
    - void sendBOM()
    - void sendPickList()
    - void sendInvoice()
    }

    class AccountController {
    + addRoutes()
    - User login()
    - void logout()

    }
    class MaterialController {
    + addRoutes()
    }
}

package entities {
    class Carport
    {
    + Carport()
    + List<Material> materials
    + int calcCarport()
    + Material calcPosts()
    + Product calcBeams()
    + Product calcRafters()
    + Material getRafters()
    + Material getBeams()
    + Material getPosts()
    'List<Product> calcBOM(User user, List<Product> products)
    'List<Product> calculateProductList(int posts, int beams, int rafters)
    }
    class Account {
    - int accountId
    - String role
    - String username
    - String password
    - int telephone
    - String email
    - String address

    + int getAccountID()
    + String getRole()
    + String getAccountName()
    + String getPassword()
    + int getTelephone()
    + String getAddress()
    }

    class Order {
    - final int orderID
    - final int customerId
    - final int carportId
    - int salesPersonId
    'public enum orderStatus { PAID,NOT_PAID,ORDER_COMPLETED}
    - enum status
    - int price
    - final TimeStamp orderPlaced
    - boolean orderPaid
    - boolean isAssigned
    + boolean getIsAssigned()
    + boolean getOrderPaid()
    + getters()
    }

    class Material {
    - int materialId
    - String productName
    - String description
    - BigDecimal price
    - String unit
    - int quantity
    - int length
    - boolean hasShedAddons
    + int getNumberOfShedAddons()
    }
    'Tagbeklædning
    class RoofCladdings {
    }
    'skruer og beslag
    class ScrewBrackers {
    }
    'tagpap (tagplader)
    class RoofingTiles {
    }

    class Shed {
    - int width
    - int length
    }
    enum RoofType {
    FLAT,
    PITCHED
    }
    class Roof
    {
    - int roofLengt
    - int roofWidth
    - final RoofType type
    }

}

package exceptions {
    class DatabaseException
    {
    + DatabaseException()
    + DatabaseException()
    }
}

package persistence {
    class ConnectionPool {
    +ConnectionPool instance
    +HikariDataSource ds
    'Ved ikke om de skal være static eller ej^
    +getInstance()
    +getConnection()
    +close()
    -createHikariConnectionPool
    }

    class OrderMapper {
    + Order getOrder()
    'hent alle forespørgsler
    + List<Order> getOrders()
    + void deleteOrderByID()
    + void updateOrderByUserID()
    + void addOrderToDB()
    }

    class MaterialMapper {
    + Material getMaterial()
    + Material getMaterialbyId()
    + void updateMaterial()
    + void updateMaterialPrice()
    + void addProductToDB()
    + void deleteMaterial()
    + List<Material> getAllMaterials()
    }

    class AccountMapper {
    + void addAccount())
    + void deleteAccount(Account account))
    + void updateAccount(Account account)
    + Account getAccountById(Account account)
    + List<Account> getAllAccounts(Account accounnt)
    + void login()
    }
}

package config {
    class ThymeLeafConfig {
    + templateEngine()
    }
    class Sessionconfig {
    }
}

package Test {
    class OrderMapperTest {
    }
    class MaterialMapperTest {
    }
    class AccountMapperTest {
    }
}

Main -- controllers

OrderController -- OrderMapper
OrderController o-- SendGrid

MaterialController -- MaterialMapper
AccountController -- AccountMapper


Carport *-- Material
Carport o-- Shed
Carport *-- Roof
Roof *-- RoofType

Material <|-- RoofCladdings
Material <|-- ScrewBrackers
Material <|-- RoofingTiles

@enduml