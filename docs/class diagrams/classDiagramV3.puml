@startuml
'https://plantuml.com/class-diagram


class Main {
+main(String[] args)
}

package utilities {

class Calculator {
+ int calcPickListPrice()
+ int calcSalesPrice()
+ int calcPosts()
+ int[] calcBeams()
+ int[] calcSideFasciaBoard()
+ int[] calcFrontAndBackFasciaBoard()
+ int[] calcRafters()
+ int calcScrewsForRoofing()
+ int calcStandardScrews()
+ int calcRollForWindCross()
+ int calcSquareWasher()
+ int calcHardwareForRaftersLeft()
+ int calcHardwareForRaftersRight()
+ int calcHardwareScrews()
+ int calcBoardBolt()
+ int[] calcRoofPlates()


}
    class SVG {
    - StringBuilder svg
    + SVG()
    + addRectangle()
    + addLine()
    + addArrow()
    + addText()
    + addSvg()
    'Override
    + toString()
    }
    class SendGrid
    {
    - String API_KEY
    - String salespersonEmail
    - String customerEmail
    - String adminEmail
    - String subjectLine
    - String body
    + SendGrid(String to, String name, String from)
    }
}

package controllers {
    class OrderController {
    + addRoutes(Javalin app, ConnectionPool pool)
    - void updateSalesPriceByOrderID(Context ctx, ConnectionPool pool)
    - void showOrderOnOfferPage(Context ctx, ConnectionPool pool)
    - void acceptOrDeclineOffer(Context ctx, ConnectionPool pool)
    + void showFrontPage(Context ctx, ConnectionPool pool)
    - void createQuery(Context ctx, ConnectionPool pool)
    - void createCarport(int orderID, Context ctx, ConnectionPool pool)
    - void sendOffer(Context ctx, ConnectionPool pool)
    - void showOrderDetails(Context ctx, ConnectionPool pool)
    - void showOrderHistory(Context ctx, ConnectionPool pool)
    - void billOfMaterials(Context ctx, ConnectionPool pool)
    }

    class AccountController {
    + addRoutes(Javalin app, ConnectionPool pool)
    - boolean passwordCheck(Context ctx, String password, String confirmPassword)
    - void createSalesAccount(Context ctx, ConnectionPool pool)
    + void doLogin(Context ctx, ConnectionPool pool)
    + void doLogout(Context ctx)
    }

    class MaterialController {
    + addRoutes(Javalin app, ConnectionPool pool)
    + void insertNewMaterial(Context ctx, ConnectionPool pool)
    + void removeMaterial(Context ctx, ConnectionPool pool)
    + void showListOfMaterials(Context ctx, ConnectionPool pool)
    }
}

package entities {
    class Carport {
    - final int WIDTH
    - final int LENGTH
    - int orderID
    - boolean hasShed
    - RoofType roofType
    - int price
    - List<Material> materialsList
    + Constructors()
    + getters()
    + setters()
    }

    class Account {
    - int accountID
    - String role
    - String username
    - String password
    - int telephone
    - String email
    - String address
    + Constructors()
    + getters()
    }

    class Order {
    - int orderID
    - String carportID
    - int price
    - Timestamp orderPlaced
    - String status
    - Account account
    - int width
    - int length
    - int salesPrice
    - RoofType roofType
    - int coverageRatioPercentage
    - int accountID
    - Carport carport
    - String shed
    - String paymentStatus
    - String svg
    + Constructors()
    + getters()
    + setters()
    }

    class Material {
    - int materialID
    - String materialName
    - String description
    - int price
    - String unit
    - int quantity
    - int length
    - int height
    - int width
    - boolean hasShedAddons
    - String type
    - int svgStartPosX
    - int svgStartPosY
    - int svgEndPosX
    - int svgEndPosY
    - int svgWidth
    - int svgHeight
    - boolean svgRafter
    + Constructors()
    + getters()
    }
    enum RoofType {
    FLAT
    PITCHED
    }
    enum StatusType{
    AFVENTER_BEHANDLING
    TILBUD_SENDT
    TILBUD_GODKENDT
    }

    class SVGCreation{
    
    }

}

package exceptions {

class DatabaseException{
+ DatabaseException(String errorMessage)
+ DatabaseException(String userMessage, String systemMessage)
}

}

package persistence {
    class OrderMapper {
    + int createQueryInOrders()
    + void createCarportInOrdersMaterials()
    + List<Order> getAllOrders()
    + List<Order> getAllWithoutSalesperson()
    + void updateSalespersonByOrderID()
    + List<Order> getAllPaidOrders()
    + Order getOrderOnReceipt()
    + List<Order> seeAllQueries()
    + int[] getLengthAndWidthByOrderID()
    + int getPickListPriceByOrderID()
    + int getCoverageRatioByOrderID()
    + int setDefaultSalesPriceByOrderID()
    + void updateSalesPriceByOrderID()
    + void updateCoverageRatioPercentageByOrderID()
    + void deleteOrderByID()
    + void updateOrderByUserID()
    }

    class MaterialMapper {
    + List<Material> createMaterialList()
    + void insertNewMaterial()
    + void updateMaterialPriceByMaterialID()
    + List<Material> createPickList()
    + int updatePickListPrice()
    + Material getPosts()
    + Material getBeams()
    + Material getSideUnderFasciaBoard()
    + Material getSideOverFasciaBoard()
    + Material getFrontAndBackUnderFasciaBoard()
    + Material getFrontAndBackOverFasciaBoard()
    + Material getRafters()
    + Material getStandardScrews()
    + Material getScrewsForRoofing()
    + Material getRollForWindCross()
    + Material getSquareWasher()
    + Material getHardwareForRaftersLeft()
    + Material getHardwareForRaftersRight()
    + Material getHardwareScrews()
    + Material getBoardBolt()
    + Material getRoofPlatesLong()
    + Material getRoofPlatesShort()
    + Material getMaterial()
    + Material getMaterialByID()
    + void updateMaterial()
    + void updateMaterialByPrice()
    + void deleteMaterial()
    + List<Material> getAllMaterials()
    }

    class AccountMapper {
    + int createRecordInAddresses()
    + void createSalesAccount()
    + Account login()
    + int createRecordInPostalCode()
    + int createRecordInCities()
    + int createCustomerAccount()
    + void addAccount())
    + void deleteAccount(Account account))
    + void updateAccount(Account account)
    + Account getAccountByID(Account account)
    + List<Account> getAllCustomerQueries()
    }
}

package Test {
    class OrderMapperTest {
    }
    class MaterialMapperTest {
    }
    class AccountMapperTest {
    }
}

Main -- controllers

OrderController -- OrderMapper

MaterialController -- MaterialMapper
AccountController -- AccountMapper

Order o-- Carport
Carport *-- Material
Carport *-- RoofType

persistence *-- Calculator
persistence *-- exceptions

@enduml