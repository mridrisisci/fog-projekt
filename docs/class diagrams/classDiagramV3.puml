@startuml
'https://plantuml.com/class-diagram


class Main {
+main(String[] args)
}

package utilities {

class Calculator {
+ int calcPickListPrice(List<Material> pickList)
+ int calcSalesPrice(int pickListPrice, double coverageRatio)
+ int calcPosts(Carport carport)
+ int[] calcPostsXY(Carport carport, int quantity, int matNum)
+ int[] calcBeams(Carport carport)
+ int[] calcBeamsXY(Carport carport, int quantity, int matNum, int matLength)
+ int[] calcSidesFasciaBoard(Carport carport)
+ int[] calcFrontAndBackFasciaBoard(Carport carport)
+ int[] calcRafters(Carport carport)
+ int[] calcRaftersXY(Carport carport, int quantity, int matNum)
+ int calcScrewsForRoofing(Carport carport)
+ int calcStandardScrews()
+ int calcRollForWindCross()
+ int calcSquareWasher(Carport carport)
+ int calcHardwareForRaftersLeft(Carport carport)
+ int calcHardwareForRaftersRight(Carport carport)
+ int calcHardwareScrews(Carport carport)
+ int calcBoardBolt(Carport carport)
+ int[] calcRoofPlates(Carport carport)

}
    class SendGrid
    {
    - String API_KEY
    - String SALESPERSON_EMAIL
    - String CUSTOMER_EMAIL
    - String subject
    + void sendOffer(String email, String subject, Order order)
    + void sendBOM(String email, String subject, Order order)
    + void sendReceipt(String email, String subject, Order order)
    + void notifySalesPersonOfNewOrder(String email, String subject)
    }
}

package controllers {
    class OrderController {
    + addRoutes(Javalin app, ConnectionPool pool)
    - void updateSalesPriceByOrderID(Context ctx, ConnectionPool pool)
    - void showOrderOnOfferPage(Context ctx, ConnectionPool pool)
    - void acceptOrDeclineOffer(Context ctx, ConnectionPool pool)
    + void showFrontPage(Context ctx, ConnectionPool pool)
    - void createQuery(Context ctx, ConnectionPool pool)
    - void createCarport(int orderID, Context ctx, ConnectionPool pool)
    - void sendOffer(Context ctx, ConnectionPool pool)
    - void showOrderDetails(Context ctx, ConnectionPool pool)
    - void showOrderHistory(Context ctx, ConnectionPool pool)
    - void billOfMaterials(Context ctx, ConnectionPool pool)
    }

    class AccountController {
    + addRoutes(Javalin app, ConnectionPool pool)
    - boolean passwordCheck(Context ctx, String password, String confirmPassword)
    - void createSalesAccount(Context ctx, ConnectionPool pool)
    + void doLogin(Context ctx, ConnectionPool pool)
    + void doLogout(Context ctx)
    }

    class MaterialController {
    + addRoutes(Javalin app, ConnectionPool pool)
    + void insertNewMaterial(Context ctx, ConnectionPool pool)
    + void removeMaterial(Context ctx, ConnectionPool pool)
    + void showListOfMaterials(Context ctx, ConnectionPool pool)
    }
}

package entities {
    class Carport {
    - final int WIDTH
    - final int LENGTH
    - int orderID
    - boolean hasShed
    - RoofType roofType
    - int price
    - List<Material> materialsList
    + Constructors()
    + getters()
    + setters()
    }

    class Account {
    - int accountID
    - String role
    - String username
    - String password
    - int telephone
    - String email
    - String address
    + Constructors()
    + getters()
    }

    class Order {
    - int orderID
    - String carportID
    - int price
    - Timestamp orderPlaced
    - String status
    - Account account
    - int width
    - int length
    - int salesPrice
    - RoofType roofType
    - int coverageRatioPercentage
    - int accountID
    - Carport carport
    - String shed
    - String paymentStatus
    - String svg
    + Constructors()
    + getters()
    + setters()
    }

    class Material {
    - int materialID
    - String materialName
    - String description
    - int price
    - String unit
    - int quantity
    - int length
    - int height
    - int width
    - boolean hasShedAddons
    - String type
    - int svgStartPosX
    - int svgStartPosY
    - int svgEndPosX
    - int svgEndPosY
    - int svgWidth
    - int svgHeight
    - boolean svgRafter
    + Constructors()
    + getters()
    }
    enum RoofType {
    FLAT
    PITCHED
    }
    enum StatusType{
    AFVENTER_BEHANDLING
    TILBUD_SENDT
    TILBUD_GODKENDT
    }

    class SVGCreation{
    + String generatePosts(List<Material> postList)
    + String generateRafters(List<Material> raftersList)
    + String generateBeams(List<Material> beamList)
    + String generateFasciaBoards(int carportLength, int carportWidth)
    + String generateCarportSVGFromTemplate(String template, String SVG)
    + String generateSVGString(List<Material> svgMaterialList, Carport carport)
    - List<Material> svgSetXYPosts(Material post, Carport carport)
    - List<Material> svgSetXYRafters(Material rafter, Carport carport)
    - List<Material> svgSetXYBeams(Material beam, Carport carport)
    - String getSVGTemplate()

    }

}

package exceptions {

class DatabaseException{
+ DatabaseException(String errorMessage)
+ DatabaseException(String userMessage, String systemMessage)
}

}

package persistence {
    class OrderMapper {
    + int createQueryInOrders(String carportID, String status, Timestamp orderPlaced, boolean orderPaid, int length, int width, boolean hasShed, String roofType, int accountID, ConnectionPool pool)
    + List<Order> getOrderDetails(int orderID, ConnectionPool pool)
    + Order getOrderByID(int orderID, ConnectionPool pool)
    + List<Order> getOrderHistory(String sortBy, ConnectionPool pool)
    + int[] getLengthAndWidthByOrderID(int order_ID, ConnectionPool pool
    + int getPickListPriceByOrderID(int orderID, ConnectionPool pool)
    + int setSalesPriceAndCoverageDefault(Carport carport, ConnectionPool pool)
    + int updatePickListPrice(Carport carport, ConnectionPool pool)
    + void updateSalesPriceByOrderID(int newSalesPrice, int orderID, ConnectionPool pool)
    + void updateOrderStatusAfterPayment(int orderID, StatusType status, ConnectionPool pool)
    + void setPaymentStatusToPaid(int orderID, ConnectionPool pool)
    + void deleteOrderByID(int orderID, ConnectionPool pool)
    + void updateSVG(int orderID, String svg, ConnectionPool pool)
    + String getSVGFromDatabase(int orderID, ConnectionPool pool)

    }

    class MaterialMapper {
    + void insertNewMaterial(String name, String unit, int price, int length, int height, int width, String type, String description, ConnectionPool pool)
    + List<Material> createPickList(Carport carport, ConnectionPool pool)
    + List<Material> getPickList(int orderID, ConnectionPool pool)
    + void insertPickListInDB(List<Material> pickList, Carport carport, ConnectionPool pool)
    + Material getPosts(Carport carport, ConnectionPool pool)
    + Material getBeams(Carport carport, ConnectionPool pool)
    + Material getSideUnderFasciaBoard(Carport carport, ConnectionPool pool)
    + Material getSideOverFasciaBoard(Carport carport, ConnectionPool pool)
    + Material getFrontAndBackUnderFasciaBoard(Carport carport, ConnectionPool pool)
    + Material getFrontAndBackOverFasciaBoard(Carport carport, ConnectionPool pool)
    + Material getRafters(Carport carport, ConnectionPool pool)
    + Material getStandardScrews(Carport carport, ConnectionPool pool)
    + Material getScrewsForRoofing(Carport carport, ConnectionPool pool)
    + Material getRollForWindCross(Carport carport, ConnectionPool pool)
    + Material getSquareWasher(Carport carport, ConnectionPool pool)
    + Material getHardwareForRaftersLeft(Carport carport, ConnectionPool pool)
    + Material getHardwareForRaftersRight(Carport carport, ConnectionPool pool)
    + Material getHardwareScrews(Carport carport, ConnectionPool pool)
    + Material getBoardBolt(Carport carport, ConnectionPool pool)
    + Material getRoofPlatesLong(Carport carport, ConnectionPool pool)
    + Material getRoofPlatesShort(Carport carport, ConnectionPool pool)
    + void removeMaterial(int materialID, String name, int length, int height, int width, ConnectionPool pool)
    + List<Material> getAllMaterials(ConnectionPool pool)
    }

    class AccountMapper {
     + int createRecordInAddresses(int cityID, int postalCodeID, String address, ConnectionPool pool)
     + void createSalesAccount(String role, String username, String email, String password, int telephone, int adressesID, ConnectionPool pool)
     + Account login(String email, String password, ConnectionPool pool)
     + int createRecordInPostalCode(int postalCode, ConnectionPool pool)
     + int createRecordInCities(String city, ConnectionPool pool)
     + int createCustomerAccount(String role, String username, int telephone, String email, int addressID, ConnectionPool pool)
     + Account getAccountByOrderID(int orderID, ConnectionPool pool)
    }
}

package Test {
    class OrderMapperTest {
    }
    class MaterialMapperTest {
    }
    class AccountMapperTest {
    }
}

Main -- controllers

OrderController -- OrderMapper
MaterialController -- MaterialMapper
AccountController -- AccountMapper

persistence -- controllers

Order o-- Carport
Carport *-- Material
Carport *-- RoofType

persistence *-- Calculator
persistence *-- exceptions

@enduml